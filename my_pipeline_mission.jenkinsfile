pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
        maven 'maven'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', changelog: false, credentialsId: 'git-cred', poll: false, url: 'https://github.com/robuzzmusk/Mission.git'
            }
        }
        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
        
        stage('Test') {
            steps {
                sh "mvn test -DskipTests=true"
            }
        }
        
        stage('Trivy Scan File System') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=Mission -Dsonar.projectName=Mission \
                           -Dsonar.java.binaries=. '''
                }
            }
        }
        
        stage('Build') {
            steps {
                sh "mvn package -DskipTests=true"
            }
        }
        
        stage('Deploy Artifacts to Nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'maven-setting', jdk: 'jdk17', maven: 'maven', mavenSettingsConfig: '', traceability: true) {
                   sh "mvn deploy -DskipTests=true"
                }
            }
        }
        
        stage('Build & Tage Docker Image') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-credd', toolName: 'docker') {
                         sh "docker build -t raviteja98/mission:latest ."
                }
            }
        }
    }
        
        stage('Trivy Scan Image') {
            steps {
                sh "trivy image --format table -o trivy-image-report.html raviteja98/mission:latest"
            }
        }
        
        stage('Publish Docker Image') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-credd', toolName: 'docker') {
                        sh "docker push raviteja98/mission:latest "
        }
}
}
}

        stage('Deploy to k8') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'DSS-EKS', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://9CFBC9C8E318E4ADC519B103DA8329F9.gr7.ap-south-1.eks.amazonaws.com') {
                    sh "kubectl apply -f ds.yml -n webapps -DskipTests=true"
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'DSS-EKS', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://9CFBC9C8E318E4ADC519B103DA8329F9.gr7.ap-south-1.eks.amazonaws.com') {
                    sh "kubectl get pods -n webapps"
                    sh "kubectl get svc -n webapps"
    
                }
            }
        }
}
        
    post {
    always {
	    script {
		    def jobName = env.JOB_NAME
			def buildNumber = env.BUILD_NUMBER
			def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
			def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green'
			: 'red'
			
			def body = """
			    <html>
				<body>
				<div style="border. 4px solid ${bannerColor}; padding: 10px;">
				<h2>${jobName} - Build ${buildNumber}</h2>
				<div style="background-color: ${bannerColor}; padding: 10px;">
				<h3 style="color: white;">Pipeline Status:
				${pipelineStatus.toUpperCase()}</h3>
				</div>
				<p>Check the <a href="${BUILD_URL}">console output</a>.</p>
				</div>
				</body>
				</html>
			"""

            emailtext (
                subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                body: body,
                to: 'robuzzmusk@gmail.com',
                from: 'jenkins@example.com',
                replyTo: 'jenkins@example.com',
                mimeType: 'text/html',
                attachmentsPattern: 'trivy-image-report.html'	
            )
        }
    }
}
}
