pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
        maven 'maven'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', changelog: false, credentialsId: 'git-cred', poll: false, url: 'https://github.com/robuzzmusk/Mission.git'
            }
        }
        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
        
        stage('Test') {
            steps {
                sh "mvn test -DskipTests=true"
            }
        }
        
        stage('Trivy Scan File System') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=Mission1 -Dsonar.projectName=Mission1 \
                           -Dsonar.java.binaries=. '''
                }
            }
        }
        
        stage('Build') {
            steps {
                sh "mvn package -DskipTests=true"
            }
        }
        
        stage('Deploy Artifacts to Nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'maven-setting', jdk: 'jdk17', maven: 'maven', mavenSettingsConfig: '', traceability: true) {
                   sh "mvn deploy -DskipTests=true"
                }
            }
        }
        
        stage('Build & Tage Docker Image') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-credd', toolName: 'docker') {
                         sh "docker build -t raviteja98/mission:latest ."
                }
            }
        }
    }
        
        stage('Trivy Scan Image') {
            steps {
                sh "trivy image --format table -o trivy-image-report.html raviteja98/mission:latest"
            }
        }
        
        stage('Publish Docker Image') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-credd', toolName: 'docker') {
                        sh "docker push raviteja98/mission:latest "
                    }
                }
            }
        }

        stage('Deploy to Container') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-credd', toolName: 'docker') {
                        sh "docker run -d -p 8083:8080 raviteja98/mission:latest "
            }
        } 
    }
}
}
}
